#summary Example: Walking a Curly queue
#labels Phase-Deploy

== Walking a Curly queue ==

=== Context ===
Use this to iterate through a curly queue and do whatever (print, in this case) on each value

=== Code ===
{{{
/* create q and load values */

/* BEGIN: walk list, printing values */
curlyqueue_iterator_jump_to_back( queue );
int val;
{except_t e;e.thrown=0;
        
    //print all values except front
    while( curlyqueue_iterator_has_next( queue, &e ) ){
        
        val = *(int*)curlyqueue_get_value_at_iterator( queue, &e );     
                                
        printf("val: %d \n", val );
                                
        curlyqueue_iterator_step_forward( queue, &e );
    }
                
    //print front value
    val = *(int*)curlyqueue_get_value_at_iterator( queue, &e );     
                
    printf("val: %d \n", val );
}
    /* END: walk list, printing values */
}}}

=== Result ===
If queue was _{1,2,3}_, it would print

_val: 1_

_val: 2_

_val: 3_

...